pipeline {
  agent {
    kubernetes {
      label 'build-test-pod'
      defaultContainer 'xtext-buildenv'
      yaml '''
        apiVersion: v1
        kind: Pod
        spec:
          containers:
          - name: jnlp
            image: 'eclipsecbi/jenkins-jnlp-agent'
            args: ['\$(JENKINS_SECRET)', '\$(JENKINS_NAME)']
            volumeMounts:
            - mountPath: /home/jenkins/.ssh
              name: volume-known-hosts
          - name: xtext-buildenv
            image: docker.io/smoht/xtext-buildenv:latest
            tty: true
          volumes:
          - configMap:
              name: known-hosts
            name: volume-known-hosts
    '''
    }
  }
  
  parameters {
    string(name: 'TARGET_BRANCH', defaultValue: 'releng_set_version', description: 'Target Git Branch')
    string(name: 'FROM_VERSION', description: 'Current Xtext version to match (major.minor.micro, without SNAPSHOT)')
    string(name: 'TO_VERSION', description: 'New Xtext version to set (major.minor.micro, without SNAPSHOT)')
    choice(name: 'TO_TYPE', choices: ['StoS','StoR','MtoR','RCtoR','BSTlatest'], description: 'StoS - Snapshot version to another Snapshot version\nStoR - Snapshot version to another Release version\nMtoR - Milestone version to another Release version\nRCtoR - RC version to another Release version\nBST - BootStrap version to another version')
    booleanParam(name: 'DRY_RUN', defaultValue: false, description: 'Dry run mode')
  }

  options {
    buildDiscarder(logRotator(numToKeepStr:'2'))
    disableConcurrentBuilds()
  }

  stages {
    stage('Checkout') {
      steps {
          checkout scm
          script {
            def gitFunctions    = load 'build-tools/git_functions.groovy'
            
            // Check preconditions
            if (TARGET_BRANCH == 'master') {
              currentBuild.result = 'ABORTED'
              error('TARGET_BRANCH \'master\' is disallowed...')
            }
            if (!FROM_VERSION?.matches('\\d\\.\\d+\\.\\d+')) {
              currentBuild.result = 'ABORTED'
              error("FROM_VERSION '${FROM_VERSION}' Invalid...")
            }
            if (!TO_VERSION?.matches('\\d\\.\\d+\\.\\d+')) {
              currentBuild.result = 'ABORTED'
              error("TO_VERSION '${TO_VERSION}' Invalid...")
            }

            def baseGitURL='git@github.com:eclipse'
            // list of Xtext repository names
            def repositoryNames = ['xtext-lib' /*, 'xtext-core', 'xtext-extras', 'xtext-eclipse', 'xtext-xtend', 'xtext-maven', 'xtext-web', 'xtext-idea', 'xtext-umbrella'*/]
            
            // checkout master branch for each repository and create the target branch
            repositoryNames.each {
              dir(it) {
                git url: "${baseGitURL}/${it}.git", branch: 'master', credentialsId: CREDENTIAL_ID_GENIE_XTEXT_GITHUB
              }
              // When release branch already exists, then delete it and create a new one
              if (gitFunctions.branchExists(it, TARGET_BRANCH)){
                gitFunctions.deleteBranch(TARGET_BRANCH)
              }
              gitFunctions.createBranch(it, TARGET_BRANCH)
            }
          }
      }
    }

    stage('Modify') {
      steps {
        script {
          sh "sh build-tools/fixVersions.sh -f $FROM_VERSION -t $TO_VERSION -b $TO_TYPE"
        }
      }
    }
    
  }

}
