pipeline {
  agent {
    kubernetes {
      label 'set-xtext-version-' + env.BUILD_NUMBER
      defaultContainer 'jnlp'
      yaml '''
        apiVersion: v1
        kind: Pod
        spec:
          containers:
          - name: jnlp
            image: 'eclipsecbi/jenkins-jnlp-agent'
            args: ['\$(JENKINS_SECRET)', '\$(JENKINS_NAME)']
            resources:
              limits:
                memory: "0.4Gi"
                cpu: "0.2"
              requests:
                memory: "0.4Gi"
                cpu: "0.2"
            volumeMounts:
            - mountPath: /home/jenkins/.ssh
              name: volume-known-hosts
          - name: xtext-buildenv
            image: docker.io/smoht/xtext-buildenv:0.9
            tty: true
            resources:
              limits:
                memory: "3.6Gi"
                cpu: "1.0"
              requests:
                memory: "3.6Gi"
                cpu: "1.0"
          volumes:
          - configMap:
              name: known-hosts
            name: volume-known-hosts
    '''
    }
  }
  
  parameters {
    string(name: 'AUTHOR_NAME', description: 'Committer name (used for Git commits)')
    string(name: 'AUTHOR_EMAIL', description: 'Committer email address (used for Git commits)')
    string(name: 'SOURCE_BRANCH', defaultValue: 'master', description: 'Source Git Branch')
    string(name: 'TARGET_BRANCH', defaultValue: 'set_version', description: 'Target Git Branch')
    booleanParam(name: 'ALL_REPOSITORIES', defaultValue: true, description: 'Perform modification on ALL repositories. If NOT checked, the TARGET_REPOSITORY below is used.')
    choice(name: 'TARGET_REPOSITORY', choices: ['xtext-lib', 'xtext-core', 'xtext-extras', 'xtext-eclipse', 'xtext-xtend', 'xtext-maven', 'xtext-web', 'xtext-idea', 'xtext-umbrella'], description: 'ONLY used when ALL_REPOSITORIES is NOT SET. Repository to modify.')
    string(name: 'NEW_XTEXT_VERSION', description: 'New Xtext version to set (major.minor.micro, without SNAPSHOT)')
    booleanParam(name: 'DRY_RUN', defaultValue: false, description: 'Dry run mode')
  }

  options {
    buildDiscarder(logRotator(numToKeepStr:'2'))
    disableConcurrentBuilds()
  }

  environment {
    repositoryNames = "${params.ALL_REPOSITORIES ? 'xtext-lib,xtext-core,xtext-extras,xtext-eclipse,xtext-xtend,xtext-maven,xtext-web,xtext-umbrella' : params.TARGET_REPOSITORY}"
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
        script {
          def git    = load 'build-tools/git_functions.groovy'
          
          // Check preconditions
          if (!AUTHOR_NAME?.trim() || !AUTHOR_EMAIL?.trim()) {
            currentBuild.result = 'ABORTED'
            error('Author required.')
          }
          if (TARGET_BRANCH == 'master') {
            currentBuild.result = 'ABORTED'
            error('TARGET_BRANCH \'master\' is disallowed...')
          }
          if (!NEW_XTEXT_VERSION?.matches('\\d\\.\\d+\\.\\d+')) {
            currentBuild.result = 'ABORTED'
            error("NEW_XTEXT_VERSION '${NEW_XTEXT_VERSION}' Invalid...")
          }

          // checkout source branch for each repository and create the target branch
          sshagent([CREDENTIAL_ID_GENIE_XTEXT_GITHUB]) {
            repositoryNames.split(',').each {
              if(fileExists("${it}/.git")) {
                dir(it) {
                      git.resetHard()
                      git.checkoutBranch(params.SOURCE_BRANCH)
                      git.pull(params.SOURCE_BRANCH)
                      // When release branch already exists, then delete it and create a new one
                      if (git.branchExists(TARGET_BRANCH)) {
                        git.deleteBranch(TARGET_BRANCH)
                      }
                }
              } else {
                sh "git clone -b ${params.SOURCE_BRANCH} --depth 1 --no-tags git@github.com:eclipse/${it}.git"
              }
              dir(it) {
                sh """
                  git config user.name ${params.AUTHOR_NAME}
                  git config user.email ${params.AUTHOR_EMAIL}
                """
                git.createBranch(TARGET_BRANCH)
              }
            }
          }
        }
      }
    }

    stage('Set Xtext Version') {
      when {
        expression { params.NEW_XTEXT_VERSION?.trim() }
      }
      steps {
        container ('xtext-buildenv') {
          script {
            def git    = load 'build-tools/git_functions.groovy'
            def gradle = load 'build-tools/gradle_functions.groovy'
            def FROM_VERSION = gradle.getXtextVersion(params.SOURCE_BRANCH)
            
            // MODIFY
            sh "sh build-tools/fixVersions.sh -f $FROM_VERSION -t ${params.NEW_XTEXT_VERSION} -b StoS"

            // COMMIT
            repositoryNames.split(',').each {
              dir(it) {
                git.printChanges()
                git.commit("[releng] Set version to ${params.NEW_XTEXT_VERSION}", params.AUTHOR_NAME, params.AUTHOR_EMAIL)
              }
            }
          } // script
        } // container
      } // steps
    } // stage

    stage('Push') {
      steps {
        // TODO: git push does not work in the xtext-buildenv container
        //   No user exists for uid 1000100000
        //   fatal: Could not read from remote repository.
        // But jnlp does not contain hub utility
        script {
          def git    = load 'build-tools/git_functions.groovy'
          
          if(!params.DRY_RUN) {
            sshagent([CREDENTIAL_ID_GENIE_XTEXT_GITHUB]) {
              repositoryNames.split(',').each {
                dir (it) {
                  sh "git push --force origin ${params.TARGET_BRANCH}"
                }
              }
            }
          } // if
        } // script
      } // steps
    } // stage
  } // stages
}
