pipeline {
  agent {
    kubernetes {
      label 'build-test-pod'
      defaultContainer 'xtext-buildenv'
      yaml '''
        apiVersion: v1
        kind: Pod
        spec:
          containers:
          - name: jnlp
            image: 'eclipsecbi/jenkins-jnlp-agent'
            args: ['\$(JENKINS_SECRET)', '\$(JENKINS_NAME)']
            volumeMounts:
            - mountPath: /home/jenkins/.ssh
              name: volume-known-hosts
          - name: xtext-buildenv
            image: docker.io/smoht/xtext-buildenv:latest
            tty: true
          volumes:
          - configMap:
              name: known-hosts
            name: volume-known-hosts
    '''
    }
  }
  
  parameters {
    string(name: 'SOURCE_BRANCH', defaultValue: 'master', description: 'Source Git Branch')
  }

  options {
    buildDiscarder(logRotator(numToKeepStr:'1'))
    disableConcurrentBuilds()
  }

  triggers { // https://jenkins.io/doc/book/pipeline/syntax/#triggers
    cron('H H(2-6) * * 1-5') // once a day in the night on weekdays
  }

  stages {
    stage('Check') {
      steps {
        script {
          def upToDate      = true
          def versions      = load 'build-tools/version_functions.groovy'
          def SOURCE_BRANCH = "${params.SOURCE_BRANCH}"
          
          def writeJUnitReport = {results, fileName ->
            def numberOfFailures = results.count { result -> result[1]!=result[2] }
            sh """
              echo \"<?xml version='1.0' encoding='UTF-8'?>\" > ${fileName}
              echo \"<testsuites>\" >> ${fileName}
              echo \"  <testsuite name='version_check' tests='${results.size()}' failures='${numberOfFailures}'>\" >> ${fileName}
            """
            results.each {
              def checkName      = it[0]
              def currentVersion = it[1]
              def latestVersion  = it[2]
              sh "echo \"    <testcase name='${checkName}'>\" >> ${fileName}"
              if (currentVersion!=latestVersion) {
                sh "echo \"      <failure message='UPDATE AVAILABLE ${currentVersion} -> ${latestVersion}'></failure>\" >> ${fileName}"
              }
              
              sh "echo \"      <system-out>VERSION IS UP-TO-DATE: ${latestVersion}</system-out>\" >> ${fileName}"
              sh "echo \"    </testcase>\" >> ${fileName}"
            }
            sh """
              echo \"  </testsuite>\" >> ${fileName}
              echo \"</testsuites>\" >> ${fileName}
              cat ${fileName}
              pwd
              find . 
            """
          }
          
          def results = [] // 0: Check; 1: Current Version used by Xtext; 2: Latest Available Version
          results.add(['Eclipse Tycho'      , versions.getXtextTychoVersion(SOURCE_BRANCH)       , versions.getLatestArtifactVersion('org.eclipse.tycho','tycho-maven-plugin')])
          results.add(['Gradle'             , versions.getXtextGradleVersion(SOURCE_BRANCH)      , versions.getLatestReleaseFromGitHubRepository('gradle','gradle')])
          results.add(['xtext-gradle-plugin', versions.getXtextGradlePluginVersion(SOURCE_BRANCH), versions.getLatestArtifactVersion('org.xtext','xtext-gradle-plugin')])
          
          sh "mkdir target" // make sure target directory exists
          writeJUnitReport(results,"target/report.xml")
        } // END script
        
        step([$class: 'JUnitResultArchiver', testResults: "target/report.xml"])
      } // END steps
    } // END stage
  } // stages

  // TODO Send messages when status changes
  post {
    always {
      archiveArtifacts artifacts: 'target/**'
    }
  }
}
