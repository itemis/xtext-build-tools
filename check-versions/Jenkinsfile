pipeline {
  agent {
    kubernetes {
      label 'build-test-pod'
      defaultContainer 'xtext-buildenv'
      yaml '''
        apiVersion: v1
        kind: Pod
        spec:
          containers:
          - name: jnlp
            image: 'eclipsecbi/jenkins-jnlp-agent'
            args: ['\$(JENKINS_SECRET)', '\$(JENKINS_NAME)']
            volumeMounts:
            - mountPath: /home/jenkins/.ssh
              name: volume-known-hosts
          - name: xtext-buildenv
            image: docker.io/smoht/xtext-buildenv:latest
            tty: true
          volumes:
          - configMap:
              name: known-hosts
            name: volume-known-hosts
    '''
    }
  }
  
  parameters {
    string(name: 'SOURCE_BRANCH', defaultValue: 'master', description: 'Source Git Branch')
  }

  options {
    buildDiscarder(logRotator(numToKeepStr:'1'))
    disableConcurrentBuilds()
  }

  triggers { // https://jenkins.io/doc/book/pipeline/syntax/#triggers
    cron('H H(2-6) * * 1-5') // once a day in the night on weekdays
  }

  stages {
    stage('Check') {
      steps {
        script {
          def upToDate      = true
          def versions      = load 'build-tools/version_functions.groovy'
          def SOURCE_BRANCH = "${params.SOURCE_BRANCH}"
          
          def writeJUnitReport = {results, fileName ->
            sh """
              echo \"<?xml version='1.0' encoding='UTF-8'?>\" > ${fileName}
              echo \"<testsuites>\" >> ${fileName}
            """
            
            // OPEN TESTSUITE
            results
              .groupBy { it[0] }
              .each { entry -> 
                def resultsForKey = results.filter{it[0]==entry.key}
                def numberOfFailures = resultsForKey.count { result -> result[2]!=result[3] }
                sh """
                  echo \"  <testsuite name='${entry.key}' tests='${resultsForKey.size()}' failures='${numberOfFailures}'>\" >> ${fileName}
                """
                // iterate over all entries with the current test suite key
                resultsForKey.each {
                  def checkCategory  = it[0]
                  def checkName      = it[1]
                  def currentVersion = it[2]
                  def latestVersion  = it[3]
                  sh "echo \"    <testcase name='${checkName}'>\" >> ${fileName}"
                  if (currentVersion!=latestVersion) {
                    sh "echo \"      <failure message='UPDATE AVAILABLE ${currentVersion} -> ${latestVersion}'></failure>\" >> ${fileName}"
                  }
                  
                  sh "echo \"      <system-out>LATEST AVAILABLE VERSION: ${latestVersion}</system-out>\" >> ${fileName}"
                  sh "echo \"    </testcase>\" >> ${fileName}"
                }
                sh "echo \"  </testsuite>\" >> ${fileName}"
            } // END each
            sh """
              echo \"</testsuites>\" >> ${fileName}
              cat ${fileName}
              pwd
              find . 
            """
          }
          
          def results = [] // 0: Category(Class), 1: Check; 2: Current Version used by Xtext; 3: Latest Available Version
          results.add([
            'Maven Plugins',
            'Eclipse Tycho',
            versions.getXtextTychoVersion(SOURCE_BRANCH),
            versions.getLatestArtifactVersion('org.eclipse.tycho','tycho-maven-plugin')
          ])
          results.add([
            'Gradle',
            'Gradle',
            versions.getXtextGradleVersion(SOURCE_BRANCH),
            versions.getLatestReleaseFromGitHubRepository('gradle','gradle')
          ])
          results.add([
            'versions.gradle',
            'Xtext Bootstrap Version',
            versions.getVersionFromGradleVersions('xtext_bootstrap',SOURCE_BRANCH),
            versions.getLatestArtifactVersion('org.eclipse.xtend','xtend-maven-plugin')
          ])
          results.add([
            'versions.gradle',
            'Spring dependency-management-plugin',
            versions.getVersionFromGradleVersions('dependency_management_plugin',SOURCE_BRANCH),
            versions.getLatestArtifactVersion('io.spring.gradle','dependency-management-plugin')
          ])
          results.add([
            'Gradle',
            'xtext-gradle-plugin',
            versions.getXtextGradlePluginVersion(SOURCE_BRANCH),
            versions.getLatestArtifactVersion('org.xtext','xtext-gradle-plugin')
          ])
          // CHECK BOM
          // The version properties in the BOM without the '-version' suffix
          def bomProperties = ['core.commands','core.contenttype','core.expressions','core.filesystem','core.jobs','core.resources','core.runtime']
          
          bomProperties.each {
            results.add([
              'BOM',
              "org.eclipse.${it}",
              versions.getVersionFromBOM(it, SOURCE_BRANCH),
              versions.getLatestArtifactVersion('org.eclipse.platform',"org.eclipse.${it}")
            ])
          }
          
          sh "mkdir target" // make sure target directory exists
          writeJUnitReport(results,"target/report.xml")
        } // END script
        
        step([$class: 'JUnitResultArchiver', testResults: "target/report.xml"])
      } // END steps
    } // END stage
  } // stages

  // TODO Send messages when status changes
  post {
    always {
      archiveArtifacts artifacts: 'target/**'
    }
  }
}
